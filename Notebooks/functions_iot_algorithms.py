from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import pandas as pd

def algorithms(X_train, y_train, X_test, y_test, classifier, scaler=False, pca_trans=True):

	# Defining pipeline steps
	if scaler:
		steps = [('scaler', StandardScaler()), ('clf', classifier)]
	else:
		steps = [('clf', classifier)]
	# Defining pipeline
	pipeline = Pipeline(steps)
	# Fitting pipeline
	pipeline.fit(X_train, y_train)
	train_pred = pipeline.predict(X_train)
	test_pred = pipeline.predict(X_test)
	# Assesing performance on train and test set with initial pipeline
	print("TRAIN Set Classification Report:")
	print(classification_report(y_train, train_pred))
	print("TEST Set Classification Report:")
	print(classification_report(y_test, test_pred))
	print("")
	print("Parameters Used: \n\n", pipeline.get_params())

	if pca_trans:
		# Defining pipeline steps with PCA. The number of components was taken from 03_EDA
		if scaler:
			steps_pca = [('scaler', StandardScaler()), ('pca', PCA(n_components=8)), ('clf', classifier)]
		else:
			steps_pca = [('pca', PCA(n_components=8)), ('clf', classifier)]
		# Defining pipeline with PCA transformation
		pipeline_pca = Pipeline(steps_pca)
		# Fitting pipeline with PCA step
		pipeline_pca.fit(X_train, y_train)
		train_pred_pca = pipeline_pca.predict(X_train)
		test_pred_pca = pipeline_pca.predict(X_test)
		print("")
		print("<--------  -------->")
		print("")
		# Assesing performance on train and test set with pipeline including PCA step
		print("TRAIN Set Classification Report with PCA:")
		print(classification_report(y_train, train_pred_pca))
		print("TEST Set Classification Report with PCA:")
		print(classification_report(y_test, test_pred_pca))