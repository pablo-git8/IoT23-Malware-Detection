############## DATA WRANGLING #############

#Imports
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import os
import pandas_profiling
from pandas_profiling import ProfileReport
import math
import pickle
import linecache
from datetime import datetime, timedelta
import json

#Personalized module for functions used
from functions_iot import summary_feature as s_f
from functions_iot import check_hyphen as ch_h

# which scenarios to analyze
iot23_scenarios = {'CTU-Honeypot-Capture-4-1': 0, 'CTU-Honeypot-Capture-5-1': 0, 'CTU-Honeypot-Capture-7-1': 0} # Expecting input
scenarios = [1,2,3] # Expecting an input
#Reading the data with pd.read_table and converting the dataframes to .pkl files
iot_data_temp = [pd.read_table(filepath_or_buffer = '../raw_data/raw/{}/bro/conn.log.labeled'.format(list(iot23_scenarios.keys())[scen]), 
        skiprows = 7) for scen in scenarios]

# Concatenating all scenarios
for i in [1,2,3,4,5,6,9,10]: #Iterating through all scenarios (but 7 and 8)
    iot_data_t = pd.read_pickle('../raw_data/pkl/{}.pkl'.format(list(iot23_scenarios.keys())[i])) #Reading ith scenario
    iot_data_t["label2"] = iot23_scenarios[list(iot23_scenarios.keys())[i]] #Adding label2 feature to ith scenario
    iot_data = pd.concat([iot_data_temp, iot_data_t]) #Concatenating scenarios (expensive operation)
    iot_data_temp = iot_data
#Naming iot_data columns   
iot_data.columns = ["ts", "uid", "id.orig_h", "id.orig_p", "id.resp_h", "id.resp_p", "proto", "service",
                "duration", "orig_bytes", "resp_bytes", "conn_state", "local_orig", "local_resp", 
                "missed_bytes", "history", "orig_pkts", "orig_ip_bytes", "resp_pkts", "resp_ip_bytes", 
                "label", "tunnel_parents", "label2", "starting_point"]

############ FEATURE ENGINEERING AND TREATMENT ############

### Dropping unnecesary features ###

# [uid, tunnel_parents, local_orig, local_resp, missed_bytes]
iot_data.drop(columns = ['uid', 'tunnel_parents', 'local_orig', 'local_resp', 'missed_bytes'], inplace = True)
iot_data.drop(iot_data[iot_data.isnull().any(axis=1)].index, axis=0, inplace=True) # Dropping last row of each scenario

### Converting types and formating features ###

# [ts, resp_pkts, id.orig_p, id.resp_p, orig_ip_bytes, resp_ip_bytes]
iot_data['ts'] = pd.to_datetime(iot_data['ts'], unit='s') #Converting UNIX timestamp to date time in column 'ts'
iot_data['resp_pkts'] = iot_data['resp_pkts'].astype(int)
iot_data['id.orig_p'] = iot_data['id.orig_p'].astype(int)
iot_data['id.resp_p'] = iot_data['id.resp_p'].astype(int)
iot_data['orig_ip_bytes'] = iot_data['orig_ip_bytes'].astype(int)
iot_data['resp_ip_bytes'] = iot_data['resp_ip_bytes'].astype(int)

### Encoding features ###

# [resp_bytes]
#Creating dictionary for the mapping
map_rb_dict = {-99: '0', 0: '1', 48: '2', 45: '3', 1801: '4', 233: '5', 144: '6', 2603: '7', 27: '8', 2241: '9', 163: '10', 106: '11', 57: '12'} #key: value on the column, val: the value to keep 
#Encoding
iot_data.loc[:,'resp_bytes'] = iot_data.loc[:,'resp_bytes'].map(map_rb_dict)
iot_data.loc[pd.isnull(iot_data['resp_bytes']), 'resp_bytes'] = '13'
#Converting the 'resp_bytes' column to integer to get a better analysis on it
iot_data['resp_bytes'] = iot_data['resp_bytes'].astype(int)

# [id.orig_h, id.resp_h]
for i in ['id.orig_h', 'id.resp_h']:
    #Changing IP representation (Non-reachable - class 2)
    iot_data.loc[np.logical_or(iot_data[i] == '0.0.0.0', iot_data[i] == '::'), i] = '2'
    #Changing IP representation (IPv4 - class 0)
    iot_data.loc[iot_data[i].str.contains('.', regex = False), i] = '0'
    #Changing IP representation (IPv6 - class 1)
    iot_data.loc[iot_data[i].str.contains(':', regex = False), i] = '1'

# [service]
#Creating dictionary for the mapping
map_s_dict = {'-': '0', 'dns': '1', 'http': '2', 'dhcp': '3', 'ssl': '4', 'ssh': '5', 'irc': '6'} #key: value on the column, val: the value to keep 
#Encoding
iot_data.loc[:,'service'] = iot_data.loc[:,'service'].map(map_s_dict)
#Converting the 'service' column to int to get a better analysis on it
iot_data['service'] = iot_data['service'].astype(int)

# [duration]
iot_data.loc[iot_data['duration'] == -99.0, 'duration'] = 0
iot_data.loc[np.logical_and(iot_data['duration'] >= 2.99878, iot_data['duration'] < 2.9988), 'duration'] = 1
iot_data.loc[np.logical_and(iot_data['duration'] != 0.0, iot_data['duration'] != 1.0), 'duration'] = 2
#Converting the 'duration' column to inrt to get a better analysis on it
iot_data['duration'] = iot_data['duration'].astype(int)

# [orig_bytes]
map_ob_dict = {-99: '0', 0: '1', 48: '2', 589: '3', 18: '4', 29: '5', 45: '6', 180: '7', 67: '8', 78: '9', 12: '10'} #key: value on the column, val: the value to keep 
#Encoding
iot_data.loc[:,'orig_bytes'] = iot_data.loc[:,'orig_bytes'].map(map_ob_dict)
iot_data.loc[pd.isnull(iot_data['orig_bytes']), 'orig_bytes'] = '11'
#Converting the 'orig_bytes' column to integer to get a better analysis on it
iot_data['orig_bytes'] = iot_data['orig_bytes'].astype(int)

# [orig_pkts]
iot_data.loc[iot_data['orig_pkts'] > 30, 'orig_pkts'] = 31
#Converting the 'orig_pkts' column to int to get a better analysis on it
iot_data['orig_pkts'] = iot_data['orig_pkts'].astype(int)

# [proto]
#Creating dictionary for the mapping
map_p_dict = {'tcp': '1', 'udp': '2', 'icmp': '3'} #key: value on the column, val: the value to keep 
#Encoding
iot_data.loc[:,'proto'] = iot_data.loc[:,'proto'].map(map_p_dict)
#Converting the 'proto' column to integer to get a better analysis on it
iot_data['proto'] = iot_data['proto'].astype(int)

# [conn_state]
#Creating dictionary for the mapping
map_cs_dict = {'S0': 0, 'SF': 1, 'OTH': 2, 'REJ': 3, 'RSTR': 4, 'S3': 5, 'RSTOS0': 6,
              'RSTO': 7, 'SH': 8, 'S1': 9, 'S2': 10, 'RSTRH': 11, 'SHR': 12} 
#Encoding
iot_data.loc[:,'conn_state'] = iot_data.loc[:,'conn_state'].map(map_cs_dict)
#Converting the 'proto' column to integer to get a better analysis on it
iot_data['conn_state'] = iot_data['conn_state'].astype(int)

# [history]
#Changing values that has 'ShA' on it to 'ShA'
iot_data['history'][iot_data['history'].str.contains('ShA', regex = False)] = 'ShA'
#Creating dictionary for the mapping
map_h_dict = {'-': '0', 'S': '1', 'D': '2', 'Dd': '3', 'Sr': '4', 'ShA': '5'} #key: value on the column, val: the value to keep 
#Encoding
iot_data.loc[:,'history'] = iot_data.loc[:,'history'].map(map_h_dict)
iot_data.loc[pd.isnull(iot_data['history']), 'history'] = '6' #All others not included in map_h_dict
#Converting the 'history' column to integer to get a better analysis on it
iot_data['history'] = iot_data['history'].astype(int)

# [label]
#Feature Encoding for saving purposes (classes 0 and 1)
iot_data['label'][iot_data['label'].str.contains('Benign', regex = False)] = 0
iot_data['label'][iot_data['label'] != 0] = 1
#Converting the 'label' column to integer to get a better analysis on it
iot_data['label'] = iot_data['label'].astype(int)

